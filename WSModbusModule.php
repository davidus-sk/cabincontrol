<?php

class WSModbusModule {
  // normal mode, the relay is directly controlled through commands
  public const MODE_NORMAL = 0x00;

  // linkage mode, Relay status is the same as the corresponding input channel status
  public const MODE_LINKAGE = 0x01;

  // flip mode, input channel input a pulse corresponding to the relay state flip once
  public const MODE_FLIP = 0x02;

  // jump mode, the input channel level jumps once and the corresponding relay state flips once
  public const MODE_JUMP = 0x03;

  // module's IP address
  private $ip;

  // module's port to connect to
  private $port;

  // TCP/IP socket
  private $socket;

  // state of relays
  private $relayStates = 0;

  // state of inputs
  private $inputStates = 0;

  // CRC for commands
  private $CRCTableHigh = [
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
  0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
  0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
  0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
  0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
  0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
  0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
  0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
  0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
  0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
  0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
  0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
  0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
  0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
  0x40];

  // CRC for commands
  private $CRCTableLow = [
  0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
  0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
  0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
  0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
  0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
  0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
  0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
  0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
  0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
  0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
  0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
  0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
  0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
  0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
  0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
  0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
  0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
  0x40];

  public function __construct($ip, $port) {
    $this->ip = $ip;
    $this->port = $port;

    $this->createSocketConnection();
  }//func

  public function __destruct() {
    $this->closeSocketConnection();
  }//func

  private function calculateCrc($message)
  {
    $crcHigh = 0xff;
    $crcLow = 0xff; 
    $index = 0;

    foreach ($message as $m) {
      $index = $crcLow ^ $m;
      $crcLow = $crcHigh ^ $this->CRCTableHigh[$index];
      $crcHigh = $this->CRCTableLow[$index];
    }//foreach

    return ($crcHigh << 8 | $crcLow);
  }//func

  private function createSocketConnection() {
    $this->socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);

    if (!$this->socket) {
      throw new Exception("Could not create socket: " . socket_strerror(socket_last_error()));
    }//if

    if (!socket_connect($this->socket, $this->ip, $this->port)) {
      throw new Exception("Could not connect to server: " . socket_strerror(socket_last_error()));
    }//if
  }//func

  private function closeSocketConnection()
  {
    if ($this->socket) {
      socket_close($this->socket);
    }//if
  }//func

  /**
   * Get states for all relays
   *
   * @return void
   */
  private function getRelayStates()
  {
    @socket_write($this->socket, "\x01\x01\x00\x00\x00\x08\x3D\xCC");
    $data = @socket_read($this->socket, 1024);

    if ($data && strlen($data) == 6) {
      $this->relayStates = ord($data[3]);
    }//if
  }//func

  /**
   * Get relay's state
   * 
   * @var $relayNumber int - Relay number to query, 1-indexed
   * @return bool
   */
  public function getRelayState($relayNumber)
  {
    $this->getRelayStates();

    return ($this->relayStates >> ($relayNumber - 1)) & 0x01;
  }//func

  public function setRelayState($relayNumber, $state)
  {
    $message = [];
    $message[0] = 0x01;
    $message[1] = 0x05;
    $message[2] = 0x00;
    $message[3] = $relayNumber - 1;
    $message[4] = $state ? 0xff : 0x00;
    $message[5] = 0x00;
    $crc = $this->calculateCrc($message);
    $message[6] = $crc & 0xFF;
    $message[7] = $crc >> 8;

    @socket_write($this->socket, pack("C*", ...$message));
    $data = @socket_read($this->socket, 1024);

    $this->getRelayStates();
  }//func

  public function setAllRelayStates($state)
  {
    $message = [];
    $message[0] = 0x01;
    $message[1] = 0x05;
    $message[2] = 0x00;
    $message[3] = 0xff;
    $message[4] = $state ? 0xff : 0x00;
    $message[5] = 0x00;
    $crc = $this->calculateCrc($message);
    $message[6] = $crc & 0xFF;
    $message[7] = $crc >> 8;

    @socket_write($this->socket, pack("C*", ...$message));
    $data = @socket_read($this->socket, 1024);

    $this->getRelayStates();
  }//func

  public function setModeForAll($mode)
  {
    $message = [];
    $message[0] = 0x01;
    $message[1] = 0x10;
    $message[2] = 0x10;
    $message[3] = 0x00;
    $message[4] = 0x00;
    $message[5] = 0x08;
    $message[6] = 0x10;

    for ($i=1; $i<=8; $i++) {
      $message[] = 0x00;
      $message[] = $mode; 
    }//for

    $crc = $this->calculateCrc($message);
    $message[] = $crc & 0xFF;
    $message[] = $crc >> 8;

    @socket_write($this->socket, pack("C*", ...$message));
    $data = @socket_read($this->socket, 1024);
  }//func

  /**
   * Return relay states as JSON object
   *
   * @return json
   */
  public function relayStatesToJson()
  {
    $states = [];

    for ($i = 0; $i < 8; $i++) {
      $states[] = ($this->relayStates >> $i) & 0x01;
    }//for

    return json_encode($states);
  }//func
}//class
